// Global Variable

@import "import1"; // 확장자 생략 가능 (c++의 export 기능이라고 보면 됨)
@import "import2";
@import "import3";
@import "import4";

$import_1_num: 123;

$main_text_size: 14px;
$main_string: "arial", sans-serif; // list
$main_color: blue;
$main_isMobile: true;
$main_null: null;
$main_palette: ( // map
    primary: #E44347,
    mars: #D7525C,
    saturn: #E4B884,
    neptune: #5147D7   
);

.mars { // map-get Function
    color: map-get($main_palette, mars);
}

body {
    color: $main_color;

    font: { // Property Nesting
        size: $main_text_size;
        family: $main_string;
    }

    line-height: percentage(20px / $main_text_size);
}


#sample_body1 {
    $color1: #333; // Local Variable
}

#sample_body2 {
    $color2: #333 !global; // Global Variable
}

#sample_body3 {
   color: $color2; // Available
}

#sample_foo {
    //width: $main_text_size + 10em; // Error
    width: calc(14px + 10em); // Good
}

p { 
    /* '/' 연산자를 사용하기 위해서는 몇가지 조건이 필요하다.
        1. 변수에 대해 사용
        2. 괄호 내에서 사용
        3. 다른 연산의 일부로서 사용
    */
    // font와 border-radius의 '/'는 CSS문법에 맞는 표현이므로 연산되지 않는다.
    font: italic bold 12px/30px Georgia, serif;
    border-radius: 10px 20px/20px;
    /*
        border-top-left-radius: 10px 20px;
        border-top-right-radius: 20px;
        border-bottom-right-radius: 10px 20px;
        border-bottom-left-radius: 20px;
    */

    $p_width: 1000px;
    width: $p_width / 2;            // 변수에 대해 사용
    height: (500px / 2);            // 괄호 내에서 사용
    margin-left: 5px + 8px / 2px;   // 다른 연산의 일부로서 사용 (margin-left: 9px;)

    // css의 /와 함꼐 사용하고자 하는 경우 #{}을 사용
    $font-size: 12px;
    $line-height: 30px;
    font: #{$font-size} / #{$line-height}; // 12px/30px
}

div {
    color: #010203 + #040506;
    // R: 01 + 04
    // G: 02 + 05
    // B: 03 + 06

    // Alpha값은 연산되지 않으므로 함수를 써야함
    $translucent_red: rgba(255, 0, 0, 0.5);
    
    // opacify
    background-color: opacify($translucent_red, 0.3); // 0.5 + 0.3

    // transparentize
    background-color: transparentize($translucent_red, 0.3); // 0.5 - 0.3

    @import "import5";
}

//Nesting
#navbar {
    width: 80%;
    height: 23px;

    ul {
        list-style-type: none;
    }

    li {
        float: left;

        a {
            font-weight: bold;
        }
    }

    // 부모요소 참조가 필요한 경우
    &:visited { // 가상 클래스 셀렉터
        color: purple;
    }
    
    &::pseudo-element { // 가상 요소 셀렉터
        font-size: 3em;
    }

    // Property에도 사용가능
    .funky {
        font: {
            family: fantasy;
            size: 30em;
            weight: bold;
        }
    }
}

//@extend

.error {
    border: 1px solid gray;
    background-color: red;
}

.jsError {
    @extend .error;
    /*
        border: 1px solid gray;
        background-color: red;
    */

    border-width: 3px;
    border-color: powderblue;
}

.foo {
    color: red;
}

// @media print { @media 블록과 같이 사용불가
//     .bar {
//         @extend .foo; // Error
//     }
// }


// Placeholder Selectors
%input-style { // 일반 css에서 사용 불가능
    font-size: 14px;
}

.input-black {
    @extend %input-style;
    /*
        font-size: 14px;
    */

    color: black;
}


$type: ocean;

// if
.study_if {
    color: if($type==ocean, blue, black);
}

// @if
.study_aif {
    @if $type == ocean {
        color: red;
    }
    @else if $type == matador {
        color: green;
    }
    @else {
        color: blue;
    }
}

// @for
@for $i from 1 through 3 {
    .item-#{$i} {width: 2em * $i;}
}

// @each
@each $animal in puma, sea-slug, egret, salamander { // List
    .#{$animal}-icon {
        background-image: url('/images/#{$animal}.png');
    }
}

@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) { // Map
    // $header: h1, $size: 2em
    // $header: h2, $size: 1.5em
    // $header: h3, $size: 1.2em
 
    #{$header} {
      font-size: $size;
    }
}

// @while
$i: 6;
@while $i > 0 {
    .item-#{$i} {
        width: 2em * $i;
    }
    $i: $i - 2;
}

// @mixin
@mixin circle {
    width: 50px;
    height: 50px;
    border-radius: 50%;
}

@mixin rect($size: 10px) { // 초기값 설정 가능
    width: $size;
    height: $size;
}

.cl_circle {
    @include circle;
    background: #f00;
}

.cl_rect {
    @include rect(50px);
    background: #00f;
}

// Function
$grid-width: 40px;
$gutter-width: 10px;

@function grid-width($n) {
    @return $n * $grid-width + ($n - 1) * $gutter-width;
}

#sidebar {
    width: grid-width(5);
}